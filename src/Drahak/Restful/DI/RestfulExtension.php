<?php

namespace Drahak\Restful\DI;

use Drahak\Restful\IResource;
use Nette;
use Nette\Configurator;
use Nette\DI\CompilerExtension;
use Nette\DI\ContainerBuilder;
use Nette\DI\Definitions\ServiceDefinition;
use Nette\DI\Definitions\Statement;
use Nette\Utils\AssertionException;
use Nette\Utils\Validators;

if (!class_exists('Nette\DI\CompilerExtension')) {
	class_alias('Nette\Config\CompilerExtension', 'Nette\DI\CompilerExtension');
	class_alias('Nette\Config\Compiler', 'Nette\DI\Compiler');
	class_alias('Nette\Config\Helpers', 'Nette\DI\Config\Helpers');
}

if (isset(Nette\Loaders\NetteLoader::getInstance()->renamed['Nette\Configurator']) || !class_exists(
		'Nette\Configurator'
	)) {
	unset(Nette\Loaders\NetteLoader::getInstance()->renamed['Nette\Configurator']);
	class_alias('Nette\Config\Configurator', 'Nette\Configurator');
}

/**
 * Drahak RestfulExtension
 *
 * @package Drahak\Restful\DI
 * @author Drahomír Hanák
 */
class RestfulExtension extends CompilerExtension
{
	/** Converter tag name */
	const CONVERTER_TAG = 'restful.converter';
	/** Snake case convention config name */
	const CONVENTION_SNAKE_CASE = 'snake_case';
	/** Camel case convention config name */
	const CONVENTION_CAMEL_CASE = 'camelCase';
	/** Pascal case convention config name */
	const CONVENTION_PASCAL_CASE = 'PascalCase';
	/**
	 * Default DI settings
	 *
	 * @var array
	 */
	protected $defaults = [
		'convention' => null,
		'timeFormat' => 'c',
		'cacheDir' => '%tempDir%/cache',
		'jsonpKey' => 'jsonp',
		'prettyPrint' => true,
		'prettyPrintKey' => 'pretty',
		'routes' => [
			'generateAtStart' => false,
			'presentersRoot' => '%appDir%',
			'autoGenerated' => true,
			'autoRebuild' => true,
			'module' => '',
			'prefix' => '',
			'panel' => true,
		],
		'security' => [
			'privateKey' => null,
			'requestTimeKey' => 'timestamp',
			'requestTimeout' => 300,
		],
	];

	/**
	 * Load DI configuration
	 *
	 * @throws AssertionException
	 */
	public function loadConfiguration()
	{
		$container = $this->getContainerBuilder();
		$config = $this->getConfig();
		$config = array_merge_recursive($this->defaults, $config);

		// Additional module
		$this->loadRestful($container, $config);
		$this->loadValidation($container);
		$this->loadResourceConverters($container, $config);
		$this->loadSecuritySection($container, $config);
		if ($config['routes']['autoGenerated']) {
			$this->loadAutoGeneratedRoutes($container, $config);
		}
		if ($config['routes']['panel']) {
			$this->loadResourceRoutePanel($container, $config);
		}
	}

	/**
	 * Before compile
	 */
	public function beforeCompile()
	{
		$container = $this->getContainerBuilder();

		$resourceConverter = $container->getDefinition($this->prefix('resourceConverter'));
		$services = $container->findByTag(self::CONVERTER_TAG);

		foreach ($services as $service => $args) {
			$resourceConverter->addSetup('$service->addConverter(?)', ['@' . $service]);
		}
	}

	/**
	 * @param ContainerBuilder $container
	 * @param $config
	 * @throws AssertionException
	 */
	private function loadRestful(ContainerBuilder $container, $config)
	{
		Validators::assert($config['prettyPrintKey'], 'string');

		$container->addDefinition($this->prefix('responseFactory'))
			->setType('Drahak\Restful\Application\ResponseFactory')
			->addSetup('$service->setJsonp(?)', [$config['jsonpKey']])
			->addSetup('$service->setPrettyPrintKey(?)', [$config['prettyPrintKey']])
			->addSetup('$service->setPrettyPrint(?)', [$config['prettyPrint']]);

		$container->addDefinition($this->prefix('resourceFactory'))
			->setType('Drahak\Restful\ResourceFactory');
		$container->addDefinition($this->prefix('resource'))
			->setFactory($this->prefix('@resourceFactory') . '::create');

		$container->addDefinition($this->prefix('methodOptions'))
			->setType('Drahak\Restful\Application\MethodOptions');

		// Mappers
		$container->addDefinition($this->prefix('xmlMapper'))
			->setType('Drahak\Restful\Mapping\XmlMapper');
		$container->addDefinition($this->prefix('jsonMapper'))
			->setType('Drahak\Restful\Mapping\JsonMapper');
		$container->addDefinition($this->prefix('queryMapper'))
			->setType('Drahak\Restful\Mapping\QueryMapper');
		$container->addDefinition($this->prefix('dataUrlMapper'))
			->setType('Drahak\Restful\Mapping\DataUrlMapper');
		$container->addDefinition($this->prefix('nullMapper'))
			->setType('Drahak\Restful\Mapping\NullMapper');

		$container->addDefinition($this->prefix('mapperContext'))
			->setType('Drahak\Restful\Mapping\MapperContext')
			->addSetup('$service->addMapper(?, ?)', [IResource::XML, $this->prefix('@xmlMapper')])
			->addSetup('$service->addMapper(?, ?)', [IResource::JSON, $this->prefix('@jsonMapper')])
			->addSetup('$service->addMapper(?, ?)', [IResource::JSONP, $this->prefix('@jsonMapper')])
			->addSetup('$service->addMapper(?, ?)', [IResource::QUERY, $this->prefix('@queryMapper')])
			->addSetup('$service->addMapper(?, ?)', [IResource::DATA_URL, $this->prefix('@dataUrlMapper')])
			->addSetup('$service->addMapper(?, ?)', [IResource::FILE, $this->prefix('@nullMapper')])
			->addSetup('$service->addMapper(?, ?)', [IResource::NULL, $this->prefix('@nullMapper')]);

		if (isset($config['mappers'])) {
			foreach ($config['mappers'] as $mapperName => $mapper) {
				$container->addDefinition($this->prefix($mapperName))
					->setType($mapper['class']);

				$container->getDefinition($this->prefix('mapperContext'))
					->addSetup('$service->addMapper(?, ?)', [$mapper['contentType'], $this->prefix('@' . $mapperName)]);
			}
		}

		// Input & validation
		$container->addDefinition($this->prefix('inputFactory'))
			->setType('Drahak\Restful\Http\InputFactory');

		// Http
		$container->addDefinition($this->prefix('httpResponseFactory'))
			->setType('Drahak\Restful\Http\ResponseFactory');

		$container->addDefinition($this->prefix('httpRequestFactory'))
			->setType('Drahak\Restful\Http\ApiRequestFactory');

		$container->getDefinition('httpRequest')
			->setType($this->prefix('@httpRequestFactory') . '::createHttpRequest');

		$container->getDefinition('httpResponse')
			->setFactory($this->prefix('@httpResponseFactory') . '::createHttpResponse');

		$container->addDefinition($this->prefix('requestFilter'))
			->setType('Drahak\Restful\Utils\RequestFilter')
			->setArguments(['@httpRequest', [$config['jsonpKey'], $config['prettyPrintKey']]]);

		$container->addDefinition($this->prefix('methodHandler'))
			->setType('Drahak\Restful\Application\Events\MethodHandler');

		$container->getDefinition('application')
			->addSetup('$service->onStartup[] = ?', [[$this->prefix('@methodHandler'), 'run']])
			->addSetup('$service->onError[] = ?', [[$this->prefix('@methodHandler'), 'error']]);
	}

	/**
	 * @param ContainerBuilder $container
	 */
	private function loadValidation(ContainerBuilder $container)
	{
		$container->addDefinition($this->prefix('validator'))
			->setType('Drahak\Restful\Validation\Validator');

		$container->addDefinition($this->prefix('validationScopeFactory'))
			->setType('Drahak\Restful\Validation\ValidationScopeFactory');

		$container->addDefinition($this->prefix('validationScope'))
			->setType('Drahak\Restful\Validation\ValidationScope')
			->setFactory($this->prefix('@validationScopeFactory') . '::create');
	}

	/**
	 * @param ContainerBuilder $container
	 * @param $config
	 * @throws AssertionException
	 */
	private function loadResourceConverters(ContainerBuilder $container, $config)
	{
		Validators::assert($config['timeFormat'], 'string');

		// Default used converters
		$container->addDefinition($this->prefix('objectConverter'))
			->setType('Drahak\Restful\Converters\ObjectConverter')
			->addTag(self::CONVERTER_TAG);
		$container->addDefinition($this->prefix('dateTimeConverter'))
			->setType('Drahak\Restful\Converters\DateTimeConverter')
			->setArguments([$config['timeFormat']])
			->addTag(self::CONVERTER_TAG);

		// Other available converters
		$container->addDefinition($this->prefix('camelCaseConverter'))
			->setType('Drahak\Restful\Converters\CamelCaseConverter');
		$container->addDefinition($this->prefix('pascalCaseConverter'))
			->setType('Drahak\Restful\Converters\PascalCaseConverter');
		$container->addDefinition($this->prefix('snakeCaseConverter'))
			->setType('Drahak\Restful\Converters\SnakeCaseConverter');

		// Determine which converter to use if any
		if ($config['convention'] === self::CONVENTION_SNAKE_CASE) {
			$container->getDefinition($this->prefix('snakeCaseConverter'))
				->addTag(self::CONVERTER_TAG);
		} else {
			if ($config['convention'] === self::CONVENTION_CAMEL_CASE) {
				$container->getDefinition($this->prefix('camelCaseConverter'))
					->addTag(self::CONVERTER_TAG);
			} else {
				if ($config['convention'] === self::CONVENTION_PASCAL_CASE) {
					$container->getDefinition($this->prefix('pascalCaseConverter'))
						->addTag(self::CONVERTER_TAG);
				}
			}
		}

		// Load converters by tag
		$container->addDefinition($this->prefix('resourceConverter'))
			->setType('Drahak\Restful\Converters\ResourceConverter');
	}

	/**
	 * @param ContainerBuilder $container
	 * @param array $config
	 */
	private function loadAutoGeneratedRoutes(ContainerBuilder $container, $config)
	{
		$container->addDefinition($this->prefix('routeAnnotation'))
			->setType('Drahak\Restful\Application\RouteAnnotation');

		$container->addDefinition($this->prefix('routeListFactory'))
			->setType('Drahak\Restful\Application\RouteListFactory')
			->setArguments([$config['routes']['presentersRoot'], $config['routes']['autoRebuild']])
			->addSetup('$service->setModule(?)', [$config['routes']['module']])
			->addSetup('$service->setPrefix(?)', [$config['routes']['prefix']]);

		$container->addDefinition($this->prefix('cachedRouteListFactory'))
			->setType('Drahak\Restful\Application\CachedRouteListFactory')
			->setArguments([$config['routes']['presentersRoot'], $this->prefix('@routeListFactory')]);

		$statement = new Statement(
			'offsetSet',
			[null, new Statement($this->prefix('@cachedRouteListFactory') . '::create')]
		);
		if ($config['routes']['generateAtStart']) {
			$setup = $container->getDefinition('router')
				->getSetup();
			array_unshift($setup, $statement);
			$container->getDefinition('router')
				->setSetup($setup);
		} else {
			$container->getDefinition('router')
				->addSetup($statement);
		}
	}

	/**
	 * @param ContainerBuilder $container
	 * @param array $config
	 */
	private function loadResourceRoutePanel(ContainerBuilder $container, $config)
	{
		$container->addDefinition($this->prefix('panel'))
			->setType('Drahak\Restful\Diagnostics\ResourceRouterPanel')
			->setArguments(
				[
					$config['security']['privateKey'],
					isset($config['security']['requestTimeKey']) ? $config['security']['requestTimeKey'] : 'timestamp',
				]
			)
			->addSetup('Nette\Diagnostics\Debugger::getBar()->addPanel(?)', ['@self']);

		$container->getDefinition('application')
			->addSetup('$service->onStartup[] = ?', [[$this->prefix('@panel'), 'getTab']]);
	}

	/**
	 * @param ContainerBuilder $container
	 * @param array $config
	 */
	private function loadSecuritySection(ContainerBuilder $container, $config)
	{
		$container->addDefinition($this->prefix('security.hashCalculator'))
			->setType('Drahak\Restful\Security\HashCalculator')
			->addSetup('$service->setPrivateKey(?)', [$config['security']['privateKey']]);

		$container->addDefinition($this->prefix('security.hashAuthenticator'))
			->setType('Drahak\Restful\Security\Authentication\HashAuthenticator')
			->setArguments([$config['security']['privateKey']]);
		$container->addDefinition($this->prefix('security.timeoutAuthenticator'))
			->setType('Drahak\Restful\Security\Authentication\TimeoutAuthenticator')
			->setArguments([$config['security']['requestTimeKey'], $config['security']['requestTimeout']]);

		$container->addDefinition($this->prefix('security.nullAuthentication'))
			->setType('Drahak\Restful\Security\Process\NullAuthentication');
		$container->addDefinition($this->prefix('security.securedAuthentication'))
			->setType('Drahak\Restful\Security\Process\SecuredAuthentication');
		$container->addDefinition($this->prefix('security.basicAuthentication'))
			->setType('Drahak\Restful\Security\Process\BasicAuthentication');

		$container->addDefinition($this->prefix('security.authentication'))
			->setType('Drahak\Restful\Security\AuthenticationContext')
			->addSetup('$service->setAuthProcess(?)', [$this->prefix('@security.nullAuthentication')]);

		// enable OAuth2 in Restful
		if ($this->getByType($container, 'Drahak\OAuth2\KeyGenerator')) {
			$container->addDefinition($this->prefix('security.oauth2Authentication'))
				->setType('Drahak\Restful\Security\Process\OAuth2Authentication');
		}
	}

	/**
	 * @param ContainerBuilder $container
	 * @param string $type
	 * @return ServiceDefinition|null
	 */
	private function getByType(ContainerBuilder $container, string $type): ?ServiceDefinition
	{
		/** @var ServiceDefinition $definition */
		foreach ($container->getDefinitions() as $definition) {
			if ($definition->class === $type) {
				return $definition;
			}
		}

		return null;
	}

	/**
	 * Register REST API extension
	 *
	 * @param Configurator $configurator
	 */
	public static function install(Configurator $configurator)
	{
		$configurator->onCompile[] = function ($compiler) {
			$compiler->addExtension('restful', new RestfulExtension);
		};
	}
}
